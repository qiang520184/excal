{"version":3,"sources":["pages/index.js","serviceWorker.js","index.js"],"names":["formateEcxal","data","name","newData","forEach","keys","values","length","mouth","substr","year","day","month","Date","getFullYear","allDay","firstDayWeek","getDay","restday","saturday","sunday","i","push","restDay","list","e","obj","workNumber","phone","department","group","saturdayOvertimeList","sundayOvertimeList","overtimeList","Object","entries","key","value","split","D","includes","console","log","indexOf","hour","minute","saturdayOvertimeNum","sundayOvertimeNum","overtimeNum","overtimePay","MyTable","column","title","width","dataIndex","fixed","render","item","inputRef","useRef","useState","columns","setData","useEffect","json","prosenData","className","type","onClick","current","click","ref","style","display","accept","onInput","persist","target","files","XLSX","file","Promise","resolve","reject","fileReader","FileReader","readAsBinaryString","onload","result","this","workbook","read","Sheets","utils","sheet_to_json","then","res","dataList","map","dataSource","rowKey","scroll","x","y","bordered","Boolean","window","location","hostname","match","Index","exact","path","component","Pages","Component","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a547dfef.chunk.js","sourcesContent":["import React, { useState, useEffect,useRef } from 'react';\nimport { Table, Button } from 'antd';\nimport json from './201909打卡情况(2).json';\nimport XLSX from 'xlsx';\nimport './index.scss';\nfunction uploadFilesChange(file) {\n\treturn new Promise((resolve, reject) => {\n\t\tconst fileReader = new FileReader();\n\t\tfileReader.readAsBinaryString(file);\n\t\tfileReader.onload = function() {\n\t\t\tlet { result } = this;\n\t\t\tconst workbook = XLSX.read(result, { type: 'binary' });\n\t\t\tlet obj = {};\n\t\t\tObject.entries(workbook.Sheets).forEach(([ keys, value ]) => {\n\t\t\t\tobj[keys] = XLSX.utils.sheet_to_json(value);\n\t\t\t});\n\t\t\tresolve(obj);\n\t\t};\n\t});\n}\n\nfunction allDay(month, year = new Date().getFullYear()) {\n\t//判断闰年\n\tif ((+year % 4 === 0 && +year % 100 !== 0) || +year % 400 === 0) {\n\t\tif (+month === 1) {\n\t\t\treturn 29;\n\t\t}\n\t} else {\n\t\treturn [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ][+month];\n\t}\n}\n\nfunction restDay(day, firstDayWeek) {\n\tlet saturday = [];\n\tlet sunday = [];\n\tfor (let i = 1; i <= day; i++) {\n\t\tif (!firstDayWeek) {\n\t\t\tif (i % 7 === 0) {\n\t\t\t\tsaturday.push(i);\n\t\t\t\tsunday.push(i + 1);\n\t\t\t} else if (i === 1) {\n\t\t\t\tsunday.push(i);\n\t\t\t}\n\t\t} else {\n\t\t\tif (i % 7 === 7 - firstDayWeek) {\n\t\t\t\tsaturday.push(i);\n\t\t\t\tif (i + 1 <= day) {\n\t\t\t\t\tsunday.push(i + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\tsaturday,\n\t\tsunday\n\t};\n}\nfunction formateEcxal(data, name) {\n\tvar newData = [];\n\tdata.forEach(([ keys, values ]) => {\n\t\tif (values && values.length) {\n\t\t\tlet mouth = keys.substr(0, 1);\n\t\t\tlet year = name.substr(0, 4);\n\t\t\tlet day = allDay(mouth - 1, year);\n\t\t\tlet firstDayWeek = new Date(`${year}/${mouth}/1`).getDay();\n\t\t\tlet restday = restDay(day, firstDayWeek);\n\t\t\tlet { saturday, sunday } = restday;\n\t\t\tlet list = [];\n\t\t\tvalues.forEach((e) => {\n\t\t\t\tlet obj = {};\n\t\t\t\tobj.name = e['姓名'];\n\t\t\t\tobj.workNumber = e['工号'];\n\t\t\t\tobj.phone = e['手机号'];\n\t\t\t\tobj.department = e['一级部门'];\n\t\t\t\tobj.group = e['二级部门'];\n\t\t\t\tobj.mouth = mouth;\n\t\t\t\tobj.saturdayOvertimeList = [];\n\t\t\t\tobj.sundayOvertimeList = [];\n\t\t\t\tobj.overtimeList = [];\n\t\t\t\tobj.saturday = saturday;\n\t\t\t\tobj.sunday = sunday;\n\t\t\t\te['姓名'] &&\n\t\t\t\t\tObject.entries(e).forEach(([ key, value ]) => {\n\t\t\t\t\t\tif (key && key.split('/').length > 1) {\n\t\t\t\t\t\t\tlet [ M, D ] = key.split('/');\n\t\t\t\t\t\t\tif (saturday.includes(+D)) {\n\t\t\t\t\t\t\t\tobj.saturdayOvertimeList.push(D);\n\t\t\t\t\t\t\t} else if (sunday.includes(+D)) {\n\t\t\t\t\t\t\t\tconsole.log(value.indexOf('~') >= 0, D);\n\t\t\t\t\t\t\t\tobj.sundayOvertimeList.push(D);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tlet [ hour, minute ] = value && value.split('~')[1].split(':');\n\t\t\t\t\t\t\t\tif ((+hour === 21 && minute >= 30) || hour > 21) {\n\t\t\t\t\t\t\t\t\tobj.overtimeList.push(D);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\tobj.saturdayOvertimeNum = obj.saturdayOvertimeList.length;\n\t\t\t\tobj.sundayOvertimeNum = obj.sundayOvertimeList.length;\n\t\t\t\tobj.overtimeNum = obj.overtimeList.length;\n\t\t\t\tobj.overtimePay =\n\t\t\t\t\t(obj.saturdayOvertimeList.length + obj.sundayOvertimeList.length) * 50 +\n\t\t\t\t\tobj.overtimeList.length * 20;\n\t\t\t\tlist.push(obj);\n\t\t\t});\n\t\t\tnewData.push({\n\t\t\t\tmouth,\n\t\t\t\tyear,\n\t\t\t\tday,\n\t\t\t\tfirstDayWeek,\n\t\t\t\tlist\n\t\t\t});\n\t\t}\n\t});\n\treturn newData;\n}\n\nfunction MyTable() {\n\tvar column = [\n\t\t{\n\t\t\ttitle: '姓名',\n\t\t\twidth: 150,\n\t\t\tdataIndex: 'name',\n\t\t\tkey: 'name',\n\t\t\tfixed: 'left'\n\t\t},\n\t\t{\n\t\t\ttitle: '工号',\n\t\t\twidth: 150,\n\t\t\tdataIndex: 'workNumber',\n\t\t\tkey: '开发部'\n\t\t},\n\t\t{\n\t\t\ttitle: '手机号',\n\t\t\tdataIndex: 'phone',\n\t\t\tkey: '',\n\t\t\twidth: 200\n\t\t},\n\t\t{\n\t\t\ttitle: '部门',\n\t\t\tdataIndex: 'department',\n\t\t\tkey: '2',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '开发组',\n\t\t\tdataIndex: 'group',\n\t\t\tkey: '3',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '月份',\n\t\t\tdataIndex: 'mouth',\n\t\t\tkey: '4',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '周六加班天数',\n\t\t\tdataIndex: 'saturdayOvertimeNum',\n\t\t\tkey: '6',\n\t\t\twidth: 150\n\t\t\t// render: (item) => item.saturdayOvertimeList.length\n\t\t},\n\t\t{\n\t\t\ttitle: '周日加班天数',\n\t\t\tdataIndex: 'sundayOvertimeNum',\n\t\t\tkey: '7',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: '工作日加班天数',\n\t\t\tdataIndex: 'overtimeNum',\n\t\t\tkey: '8',\n\t\t\twidth: 150\n\t\t},\n\t\t{\n\t\t\ttitle: 'money',\n\t\t\tkey: 'operation',\n\t\t\tfixed: 'right',\n\t\t\twidth: 100,\n\t\t\trender: (item) => <a>{item.overtimePay}</a>\n\t\t}\n\t];\n\tconst inputRef = useRef(null);\n\tconst [ columns, setColumns ] = useState(column);\n\tconst [ data, setData ] = useState([]);\n\tuseEffect(() => {\n\t\tsetData(Object.values(json[0].prosenData));\n\t}, []);\n\treturn (\n\t\t<div>\n\t\t\t<div className=\"top\">\n\t\t\t\t<Button type=\"dashed\" onClick={() => inputRef.current.click()}>选择考勤表</Button>\n\t\t\t\t<input\n\t\t\t\t\tref={inputRef}\n\t\t\t\t\tstyle={{display: 'none'}}\n\t\t\t\t\ttype=\"file\"\n\t\t\t\t\taccept=\".xls,.xlsx\"\n\t\t\t\t\tonInput={(e) => {\n\t\t\t\t\t\te.persist();\n\t\t\t\t\t\tconsole.log(e, e.target.files[0], e.target.value, XLSX);\n\t\t\t\t\t\tvar files = e.target.files[0];\n\t\t\t\t\t\tvar name = files.name;\n\t\t\t\t\t\tuploadFilesChange(files).then((res) => {\n\t\t\t\t\t\t\tlet dataList = formateEcxal(Object.entries(res), name);\n\t\t\t\t\t\t\tlet data = [];\n\t\t\t\t\t\t\tdataList.map((item) => {\n\t\t\t\t\t\t\t\tdata.push(...item.list);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tsetData(data);\n\t\t\t\t\t\t});\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Table columns={columns} dataSource={data} rowKey=\"name\" scroll={{ x: 800, y: 1000 }} bordered />\n\t\t</div>\n\t);\n}\nexport default MyTable;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport Pages from './pages/index';\n// import App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'antd/dist/antd.css';\n\nclass Index extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<BrowserRouter>\n\t\t\t\t<Switch>\n\t\t\t\t\t<Route exact path=\"/\" component={Pages} /> {/* 列表 */}\n\t\t\t\t</Switch>\n\t\t\t</BrowserRouter>\n\t\t);\n\t}\n}\n\nReactDOM.render(<Index />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}